step 1 - Create Models C# Class with properties/variables

Step 2 - Let dotnet EntityFramework know about the class 
(create Prop DBset for new migration after editing the models folder)

Step 3 - Dotnet ef migrations add {AddedUserEntity} (double check newly created migration)

Step 4 - Apply to database - Dotnet ef database update

-------the repository pattern------- lecture 26.

Levels of abstraction --> C# <calls> EntityFramework <Calls> SQLIte

##reasons to use repository pattern

1.Minimizes Duplicate Logic

2.Decouples Application from Persistence framework

3.All DB Quesries in the same place

4.Promotes testability

Step 1 - Create C# Interface Class "IAuthrepository.cs"

Step 2 - creates Methods in C* Interface for Register, Login, adn User Exists

## Using the "using command will dispose of anything inside the {} braces below

Step 3 - After Respository is made we need to tell our application 
about it - add it to our services container to inject into other classes. (startup.cs file)

-----AuthController------

Ref##[HttpPost("register")]
        public async Task<IActionResult> Register(string username, string password) 

##String username, String Password won't work in the case so we have to create a DTO data transfer object.

-----Validation-------

Validate with data anotations eg. [Required] [Email Address]

--------JWT Structure---------

{
	"alg" : "HS512",             Header > Payload > Secret
	"typ" : "JWT"
}


-----Angular Forms--------

how to make an HTML form an angular form:

1a. Assign template reference variable = #loginForm="ngForm" and ngForm Directive

1. Give it a name="username" attribute to allow angualt to assign it to the form controls

2. Use a-ngmodel

3. Use ngSubmit

##using angular services taht will create methods that will make queries to the API---------

The Job of a component is to provide data to our HTML template

Services are used to avoid duplication code. Services can be made available for injection and to centralize our api calls in our application.

Components are injectable by default and services are not so yo uneed to provide an injectable method

##in order to receive proerties into our child component we need to use @input() valuesFromHome: any;

## there is always 4 parts to adding an output property 

1. output property itself
2. asign new evenet emitter


## Components provide the logic to mak our HTML work (keep the components as simple as possible)


---------------Section 8------------

##You create a structure of all the methods you are going to use in a Interface repository. 75. Creating a new repository

##After creating an interface and concrete implementation of the interface you need to create a user controller to extract data from the user.










